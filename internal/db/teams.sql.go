// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: teams.sql

package db

import (
	"context"
	"database/sql"
)

const getTeamById = `-- name: GetTeamById :one
SELECT "id", "league_id", "year", "teamAbbrv", "owners", "divisionId", "divisionName", "wins", "losses", "ties", "pointsFor", "pointsAgainst", "waiverRank", "acquisitions", "acquisitionBudgetSpent", "drops", "trades", "logoUrl" 
FROM "teams" 
WHERE "id" = $1
`

type GetTeamByIdRow struct {
	ID                     int32          `json:"id"`
	LeagueID               int32          `json:"league_id"`
	Year                   int32          `json:"year"`
	TeamAbbrv              string         `json:"teamAbbrv"`
	Owners                 sql.NullString `json:"owners"`
	DivisionId             sql.NullString `json:"divisionId"`
	DivisionName           sql.NullString `json:"divisionName"`
	Wins                   sql.NullInt32  `json:"wins"`
	Losses                 sql.NullInt32  `json:"losses"`
	Ties                   sql.NullInt32  `json:"ties"`
	PointsFor              sql.NullInt32  `json:"pointsFor"`
	PointsAgainst          sql.NullInt32  `json:"pointsAgainst"`
	WaiverRank             sql.NullInt32  `json:"waiverRank"`
	Acquisitions           sql.NullInt32  `json:"acquisitions"`
	AcquisitionBudgetSpent sql.NullInt32  `json:"acquisitionBudgetSpent"`
	Drops                  sql.NullInt32  `json:"drops"`
	Trades                 sql.NullInt32  `json:"trades"`
	LogoUrl                sql.NullString `json:"logoUrl"`
}

func (q *Queries) GetTeamById(ctx context.Context, id int32) (GetTeamByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTeamById, id)
	var i GetTeamByIdRow
	err := row.Scan(
		&i.ID,
		&i.LeagueID,
		&i.Year,
		&i.TeamAbbrv,
		&i.Owners,
		&i.DivisionId,
		&i.DivisionName,
		&i.Wins,
		&i.Losses,
		&i.Ties,
		&i.PointsFor,
		&i.PointsAgainst,
		&i.WaiverRank,
		&i.Acquisitions,
		&i.AcquisitionBudgetSpent,
		&i.Drops,
		&i.Trades,
		&i.LogoUrl,
	)
	return i, err
}

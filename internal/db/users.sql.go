// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT id, name
FROM users 
WHERE provider = $1 AND provider_id = $2
`

type GetUserByProviderParams struct {
	Provider   string `json:"provider"`
	ProviderID string `json:"provider_id"`
}

type GetUserByProviderRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (GetUserByProviderRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByProvider, arg.Provider, arg.ProviderID)
	var i GetUserByProviderRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (
    name,
    email,
    activated,
    provider,
    provider_id
)
VALUES (
    $1, $2, $3, $4, $5
)
ON CONFLICT (provider, provider_id) DO UPDATE
SET
    name = EXCLUDED.name,
    email = EXCLUDED.email,
    activated = EXCLUDED.activated,
    version = users.version + 1,
    created_at = NOW()
RETURNING id, created_at, version
`

type UpsertUserParams struct {
	Name       string         `json:"name"`
	Email      sql.NullString `json:"email"`
	Activated  bool           `json:"activated"`
	Provider   string         `json:"provider"`
	ProviderID string         `json:"provider_id"`
}

type UpsertUserRow struct {
	ID        int64     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Version   int32     `json:"version"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (UpsertUserRow, error) {
	row := q.db.QueryRowContext(ctx, upsertUser,
		arg.Name,
		arg.Email,
		arg.Activated,
		arg.Provider,
		arg.ProviderID,
	)
	var i UpsertUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return i, err
}
